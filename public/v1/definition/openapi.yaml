openapi: 3.0.0

info:
  title: API Definition
  version: 1.0.0
  description: How to use open api definition for api collection
  contact:
    name: Viral Mistry
    email: viralhmistry@gmail.com
    url: viralmistry.in

servers:
  - url: 'http://localhost:3000/v1'
    description: Local development server
  - url: 'https://api.staging.com/v1'
    description: Staging server
  - url: 'https://api.production.com/v1'
    description: Production server

tags:
  - name: Book
    description: Book Management

paths:

  # Book Management
  /books:
    get:
      operationId: get-books
      tags:
      - Book
      summary: Get the Books
      description: Get a list with all the Books
      parameters:
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/author'
        - $ref: '#/components/parameters/published_date'
      responses:
        '200':
          description: List of Books
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    description: An array of book entries.
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        default:
          $ref: "#/components/responses/BadRequest"
    post:
      operationId: create-books
      tags:
      - Book
      summary: Create Book
      description: Create book by any user
      requestBody:
        $ref: '#/components/requestBodies/BookBody'
      responses:
        '201':
          $ref: "#/components/responses/SuccessfulPost"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        default:
          $ref: "#/components/responses/BadRequest"
  /books/{id}:
    get:
      operationId: get-book
      tags:
      - Book
      summary: Get a sepcific Book
      description: Get a sepcific Book by any user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Get a sepcific Book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/BadRequest"
    put:
      operationId: update-book
      tags:
      - Book
      summary: Update a sepcific Book
      description: Update a sepcific Book by any user
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        $ref: '#/components/requestBodies/BookBody'
      responses:
        '200':
          $ref: "#/components/responses/SuccessfulPut"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
        '404':
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/BadRequest"
    delete:
      operationId: delete-book
      tags:
      - Book
      summary: Delete a specific Book
      description: Delete a sepcific Book by any user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: "#/components/responses/SuccessfulDelete"
        '404':
          $ref: "#/components/responses/NotFound"
        default:
          $ref: "#/components/responses/BadRequest"

components:
  schemas:
    Book:
      description: Book
      type: object
      required:
      - title
      - author
      properties:
        id:
          type: integer
          example: 1
          description: Id of the book
        title:
          type: string
          example: Ruby on Rails
          description: Title of the Book
        author:
          type: string
          example: GoalKicker
          description: Author of the Book
        total_pages:
          type: string
          example: 105
          description: Total pages of the book
        published_date:
          type: string
          format: date
          example: "2022-03-04"
          description: Date of the published
        created_at:
          type: string
          format: date-time
          example: "2022-03-04T18:30:00.000Z"
          description: Date/Time of record creation
        updated_at:
          type: string
          format: date-time
          example: "2022-03-04T18:30:00.000Z"
          description: Date/Time of record last update

    Response:
      description: Response
      required:
      - status
      properties:
        status:
          type: string
          enum:
          - Success
          - Error
          - Warning
          example: Success
    ResponseWithId:
      description: Response With Id
      allOf:
      - $ref: '#/components/schemas/ResponseWithMessage'
      - required:
        - id
        properties:
          id:
            type: integer
            example: 1
    ResponseWithMessage:
      description: Response With Message
      allOf:
      - $ref: '#/components/schemas/Response'
      - required:
        - message
        properties:
          message:
            type: string
            example: Record {Operation} Successfully
    ResponseWithoutId:
      description: Response Without Id
      allOf:
      - $ref: '#/components/schemas/ResponseWithMessage'

  responses:
    SuccessfulPost:
      description: Record Created Successfully
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ResponseWithId'
            - properties:
                message:
                  example: Record Created Successfully
    SuccessfulPut:
      description: Record Updated Successfully
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ResponseWithoutId'
            - properties:
                message:
                  example: Record Updated Successfully
    SuccessfulDelete:
      description: Record Deleted Successfully
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ResponseWithMessage'
            - properties:
                message:
                  example: Record Deleted Successfully
    NotFound:
      description: Record not found
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ResponseWithMessage'
            - properties:
                status:
                  example: Error
                message:
                  example: Record not found
    BadRequest:
      description: Something is wrong with the parameters or the request itself
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ResponseWithMessage'
            - properties:
                status:
                  example: Error
                message:
                  example: Something is wrong with the parameters or the request itself
    UnprocessableEntity:
      description: The server could not process the entity due to some reason.
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ResponseWithMessage'
            - properties:
                status:
                  example: Error
                message:
                  example: There is a problem with the request body you sent.

  requestBodies:
    BookBody:
      description: A JSON object with book information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                $ref: '#/components/schemas/Book/properties/title'
              author:
                $ref: '#/components/schemas/Book/properties/author'
              total_pages:
                $ref: '#/components/schemas/Book/properties/total_pages'
              published_date:
                $ref: '#/components/schemas/Book/properties/published_date'

  parameters:
    id:
      name: id
      in: path
      description: Record ID
      required: true
      schema:
        type: integer
        minimum: 1
    title:
      name: title
      in: query
      description: Book search by title
      schema:
        type: string
    author:
      name: author
      in: query
      description: Book search by author
      schema:
        type: string
    published_date:
      name: published_date
      in: query
      description: (2022-03-04) Book search by published_date
      schema:
        type: string
        format: date
